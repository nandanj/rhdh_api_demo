import requests
import json

# --- Configuration ---
API_BASE_URL_ext = "https://backstage-backstage.apps.cluster-h8p9j.h8p9j.sandbox1517.opentlc.com" # <<< IMPORTANT: Replace with your actual API base URL
API_BASE_URL_orig = "http://route-backstage-internal-backstage.apps.cluster-h8p9j.h8p9j.sandbox1517.opentlc.com" # <<< IMPORTANT: Replace with your actual API base URL
API_BASE_URL = "https://backstage-backstage.apps.cluster-tvwbg.tvwbg.sandbox1943.opentlc.com" # <<< IMPORTANT: Replace with your actual API base URL

BEARER_TOKEN_orig = "sha256~yvAgKrsVh1qdXrbMLqv9_Sxm4oVe6OWWO2AsNx-LEl4" # <<< IMPORTANT: Replace with your actual Bearer Token
BEARER_TOKEN = "foobarbaz" # <<< IMPORTANT: Replace with your actual Bearer Token

HOST="gitlab-gitlab.apps.cluster-tvwbg.tvwbg.sandbox1943.opentlc.com"


# --- API Endpoints ---
LIST_ACTIONS_URL = f"{API_BASE_URL}/api/scaffolder/v2/actions"
CREATE_TASK_URL = f"{API_BASE_URL}/api/scaffolder/v2/tasks"
LIST_TASKS_URL = f"{API_BASE_URL}/api/scaffolder/v2/tasks"

# --- Common Headers ---
HEADERS = {
    "Authorization": f"Bearer {BEARER_TOKEN}",
    "Content-Type": "application/json",
    "Accept": "application/json"
}

# --- Helper function for making API calls ---
def call_api(method, url, headers, json_data=None, params=None):
    """Generic function to call an API endpoint."""
    print(f"\n--- Calling {method} {url} ---")
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, params=params, timeout=10)
        elif method == "POST":
            response = requests.post(url, headers=headers, json=json_data, timeout=10)
        else:
            print(f"Error: Unsupported method {method}")
            return None

        response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)

        print(f"Status Code: {response.status_code}")
        try:
            return response.json()
        except json.JSONDecodeError:
            print("Response is not JSON, returning raw text.")
            return response.text

    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e}")
        print(f"Response Body: {e.response.text}")
    except requests.exceptions.ConnectionError as e:
        print(f"Connection Error: {e}")
    except requests.exceptions.Timeout as e:
        print(f"Timeout Error: {e}")
    except requests.exceptions.RequestException as e:
        print(f"An unexpected error occurred: {e}")
    return None

# --- API Call Examples ---

def list_scaffolder_actions():
    """Calls GET /api/scaffolder/v2/actions to list available actions."""
    print("\n--- Listing Available Scaffolder Actions ---")
    actions = call_api("GET", LIST_ACTIONS_URL, HEADERS)
    if actions:
        print("Available Actions:")
        for action in actions:
            print(f"  ID: {action.get('id')}, Description: {action.get('description', 'N/A')}")
    else:
        print("Failed to retrieve actions.")

def create_scaffolder_task():
    """Calls POST /api/scaffolder/v2/tasks to create a new task."""
    print("\n--- Creating a New Scaffolder Task ---")

    # This payload must conform to the 'Task' schema defined in your OpenAPI spec.
    # For a minimal valid task, we usually need at least 'templateRef' and 'values'.
    # The 'id', 'status', 'createdBy', 'secrets', 'logs' are often generated by the server.
    task_payload = {
        "templateRef": "template:default/quarkus-web-template-api-compat-gitlab", # Replace with an actual template ID if known
        "values": {
          "component_id": "ssa-grp-testapp",
          "description": "simple Quarkus app",
          "group_id": "qgroup",
          "artifact_id": "qartifact",
          "java_package_name": "com.redhat.rhdh",
          "image_registry": "Quay",
          "image_host": "quay.apps.cluster-tvwbg.tvwbg.sandbox1943.opentlc.com",
          "image_tag": "latest",
          "destination": "dev1/wells-demo",
          "repo": {
            "host": HOST,
            "owner": "rhdh"
          },
          "username": "dev1"
        },
        "secrets": {
          "image_password": "MTY1MjU0"
        }
    }
    print(f"Request Payload: {json.dumps(task_payload, indent=2)}")

    new_task_response = call_api("POST", CREATE_TASK_URL, HEADERS, json_data=task_payload)
    if new_task_response:
        print(f"Task created successfully! Task ID: {new_task_response.get('id')}")
        return new_task_response.get('id')
    else:
        print("Failed to create task.")
        return None

def list_scaffolder_tasks(created_by=None, status=None):
    """Calls GET /api/scaffolder/v2/tasks to list tasks."""
    print("\n--- Listing Scaffolder Tasks ---")
    params = {}
    if created_by:
        params['createdBy'] = created_by
    if status:
        params['status'] = status

    tasks = call_api("GET", LIST_TASKS_URL, HEADERS, params=params)
    if tasks:
        print(f"Found {len(tasks)} Task(s):")
        for task in tasks:
            #taskdict=json.loads(task)
            #print(f"  ID: {taskdict.get('id')}")
                  
            print(f"  ID: {task.get('id')}, Status: {task.get('status')}, Created By: {task.get('createdBy')}, Template: {task.get('templateRef')}")
    else:
        print("No tasks found or failed to retrieve tasks.")


# --- Main execution ---
if __name__ == "__main__":
    # 1. List available actions
    list_scaffolder_actions()

    # 2. Create a new task
    created_task_id = create_scaffolder_task()

    # # 3. List tasks (optional: filter by the user we just used)
    #if created_task_id:
    #  print("\n--- Listing Tasks filtered by the user who created it ---")
     # list_scaffolder_tasks(created_by="scaffolder-app-user")

    #print("\n--- Listing All Tasks ---")
    #list_scaffolder_tasks()

    print("\n--- Script Finished ---")
